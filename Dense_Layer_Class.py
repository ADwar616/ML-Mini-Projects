# """
# Dense or Fully-connected layers
#
# class Layer_Dense :
# def __init__ ( self , n_inputs , n_neurons ):
# # Initialize weights and biases
# pass # using pass statement as a placeholder
#
# # Forward pass
# (When we pass data through a model from beginning to end, this is called a forward pass)
# def forward ( self , inputs ):
# # Calculate output values from inputs, weights and biases
# pass # using pass statement as a placeholder
#
# """
#
# import numpy as np
# import nnfs
# """
# The nnfs.init() does three things: it sets the random seed to 0 (by the default), creates a
# float32 dtype default, and overrides the original dot product from NumPy. All of these are meant
# to ensure repeatable results for following along.
# Repeats the value generated by random.
# """
# #nnfs.init() can also be used
# np.random.seed(0) # sets the deviation seed
# print (np.random.randn( 2 , 5 ))
#
# """
# the np.zeros function takes a desired array shape as an argument and returns an array of
# that shape filled with zeros.
# """
# print(np.zeros((2,5)))

import numpy as np
import nnfs
from nnfs.datasets import spiral_data

nnfs.init()

# Dense layer
class Layer_Dense :
    # Layer initialization
    def __init__ ( self , n_inputs , n_neurons ):
        # Initialize weights and biases
        self.weights = 0.01 * np.random.randn(n_inputs, n_neurons)
        self.biases = np.zeros(( 1 , n_neurons))
    # Forward pass
    def forward ( self , inputs ):
        # Calculate output values from inputs, weights and biases
        self.output = np.dot(inputs, self.weights) + self.biases

# Create dataset
X, y = spiral_data( samples = 100 , classes = 3 )
# Create Dense layer with 2 input features and 3 output values
dense1 = Layer_Dense( 2 , 3 )
# Perform a forward pass of our training data through this layer
dense1.forward(X)
# Let's see output of the first few samples:
print (dense1.output[: 10 ])